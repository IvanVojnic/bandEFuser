// Code generated by mockery v2.20.0. DO NOT EDIT.

package repomocks

import (
	context "context"

	models "github.com/IvanVojnic/bandEFuser/models"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// UserComm is an autogenerated mock type for the UserComm type
type UserComm struct {
	mock.Mock
}

// AcceptFriendsRequest provides a mock function with given fields: ctx, userSenderID, userID
func (_m *UserComm) AcceptFriendsRequest(ctx context.Context, userSenderID uuid.UUID, userID uuid.UUID) error {
	ret := _m.Called(ctx, userSenderID, userID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID) error); ok {
		r0 = rf(ctx, userSenderID, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeclineFriendsRequest provides a mock function with given fields: ctx, userSenderID, userID
func (_m *UserComm) DeclineFriendsRequest(ctx context.Context, userSenderID uuid.UUID, userID uuid.UUID) error {
	ret := _m.Called(ctx, userSenderID, userID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID) error); ok {
		r0 = rf(ctx, userSenderID, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindUser provides a mock function with given fields: ctx, userEmail
func (_m *UserComm) FindUser(ctx context.Context, userEmail string) (*models.User, error) {
	ret := _m.Called(ctx, userEmail)

	var r0 *models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*models.User, error)); ok {
		return rf(ctx, userEmail)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.User); ok {
		r0 = rf(ctx, userEmail)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userEmail)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFriends provides a mock function with given fields: ctx, userID
func (_m *UserComm) GetFriends(ctx context.Context, userID uuid.UUID) ([]*models.User, error) {
	ret := _m.Called(ctx, userID)

	var r0 []*models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]*models.User, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) []*models.User); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRequest provides a mock function with given fields: ctx, userID
func (_m *UserComm) GetRequest(ctx context.Context, userID uuid.UUID) ([]*models.User, error) {
	ret := _m.Called(ctx, userID)

	var r0 []*models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]*models.User, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) []*models.User); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SendFriendsRequest provides a mock function with given fields: ctx, userSender, userReceiver
func (_m *UserComm) SendFriendsRequest(ctx context.Context, userSender uuid.UUID, userReceiver uuid.UUID) error {
	ret := _m.Called(ctx, userSender, userReceiver)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID) error); ok {
		r0 = rf(ctx, userSender, userReceiver)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewUserComm interface {
	mock.TestingT
	Cleanup(func())
}

// NewUserComm creates a new instance of UserComm. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUserComm(t mockConstructorTestingTNewUserComm) *UserComm {
	mock := &UserComm{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
